@startuml swarch

title Dependencies

package "Application Layer" as AL {
    package States {}

    package Scenes {
        class "Scene" 

        class "FoundObject" {
            angle
            color
            current_position : tuple[int, int, int, int]
            identifier_number
            get_newest_point() -> tuple[int, int]
            get_speed() -> tuple[int, int]
            update(position, angle)
        }

        class "FoundObjectMaster" {
            found_objects : list[FoundObject]
            add_found_object(num: int, position: tuple[int, int, int, int], angle) -> None
            get_best_match(point: tuple[int, int]) -> int
            get_found_object(index: int) -> FoundObject
            is_found_object(image, rectangle: tuple[int, int, int, int]) -> bool
            reset()
            update_found_object(a_list)
        }

        class "BackgroundManager" {
            background
            background_path
            copy_region(image, rectangle: tuple[int, int, int, int])
            set_background(image)
        }

        class "ArAuthority" {
            marker_corners
            marker_perimeter : int
            calculate_corners(image: np.array)
        }

        class "LordScaler" {
            ratio
            convert(num: int) -> int
            init(marker_perimeter: int)
        }

        class "Publisher" {
            broker : str
            client_id : str
            port : int
            topic : str
            json_builder(position, speed, angle: int, error_code: int) -> str
            send(found_object_list)
        }

        class "Drawer" {
            new_frame_time : int
            prev_frame_time : int
            draw_objects(found_object_list, frame)
            draw_text(frame, txt: str, location: tuple[int, int], color)
        }
    }


    class "SpaceShipRadar" #PaleGreen

    class "RotationDirector" {
        calc_angle(image, rectangle)
        get_biggest_contour(contours)
    }

    class "ObjectFinder" {
        get_contours(image: np.ndarray, background: np.ndarray) -> np.array
    }

}

package "Service Layer" as SL {

    class Helper

    class "PathGovernor" {
        image_folder_path : NoneType
        get_path() -> str
    }

    class "ImageGetter" {
        camera_matrix
        dist
        file
        get_image(device) -> np.array
        record_video(camera, step, time_step, width, height)
    }

    class "Transformer" {
        perspective_transform(image: np.array, corners: List[Tuple[int, int]]) -> np.array
    }

    class "VideoChef" {
        path
        video
        get_video()
        get_video_path()
    }
}

class Os #SkyBlue
class "Robot" #pink
' class OpenCV #pink

' ImageGetter ..> OpenCV
ImageGetter .> Robot
ImageGetter .> PathGovernor

' ObjectFinder ..> OpenCV

PathGovernor ..> Os

' RotationDirector ..> OpenCV

Scene --o FoundObjectMaster
' Scene ..> OpenCV
Scene --* "*" FoundObject
Scene ..> Helper
Scene --o BackgroundManager
Scene ..> PathGovernor
Scene --o ArAuthority
Scene --o LordScaler
Scene --o Publisher
Scene --o Drawer
FoundObjectMaster .> FoundObject

' Settings ..> OpenCV

' States ..> OpenCV
States .> ImageGetter
States ..> Scene
States .> Transformer
States ..> ObjectFinder
States ..> RotationDirector

' Transformer ..> OpenCV

' VideoChef ..> OpenCV
VideoChef ..> PathGovernor

' SpaceShipRadar ..> OpenCV
SpaceShipRadar ..> Robot
SpaceShipRadar ..> ImageGetter
SpaceShipRadar ..> States


note right of Robot
Class provided by Webots
end note

@enduml